Below are some functional requirement BeBetter application:

Phase 1:
Core Requirement:
User Feature Related:
@@@ [Done] User should be able to Register himself. When we register data should flow in USer, UserCredential and Plan table. 
@@@ [Done] We can sign up user with some basic details.
  a. UI will call the login api of user service. If user logged in successfully then 200 with user object. If user login failed then 401. Message could be 
     "incorrect password" or "user with this user id does not exist"
@@@ [Done] User should be able to login using basic authentication before they can perform anything.
@@@ [Done] User should be able to update his profile
@@@ [Done] User should be able to delete his profile
@@@ [Done ]We have should have plans for the user. Like silver, gold and platinum. A user should be able to keep 2, 5 and 10 task for these plans respectively.  
@@@ Should we able to just upgrade the plan

Task Feature Related:
@@@ [Done] User can add task for today or for any future date. But only after the task is allowed according to user current plan. (User serice call involved)
@@@ User can perform below actions on the task:
  @@@ should be able to assign points to the task. 
  @@@ Should be able to complete or cancel the task.
  @@@ Should be able to update the task and any of its property
@@@ User should be able to fetch all the tasks, its basic details and total points for all the task
@@@ User should be able to be able to complete the task by giving points to that task. like 5 point of 10 points.
@@@ User must not be able to add task more than allowed in his plan

User Feature Related: Diary Related
@@@ [Done] In all the request, user should be able to authenticate calling user service and only then serve the request
@@@ [Done] Diary Current status: Fetch all task of the day with points for a user
@@@ Current Day efficiency status: User should be able to calculate the total efficiency of the day
@@@ Mornthly report: User should be able to add get the average efficiency of a month
@@@ Yearly report: User should be able to get a yearly report


Phase 2:
@@@User should be kept encrypted and only be decrypted during authentication process.
@@@Proper exception handling in entire application including the status code for 500 and other
@@@Put logs wisely
@@@SHould allow sub tasks
@@@Should have a feature of dialy tasks
@@@API Documentation tools open API


Important Resources:
Free mysql database: https://www.freesqldatabase.com/account/
Php admin (Db client): https://phpmyadmin.co/sql.php?server=1&db=sql12600753&table=plan&pos=0
--------------------------------------------------------------------------------------------------------------------------------------

API Call Details:

|||Task Service (Diary, Tasks and Efficiency)|||

||API 1: Create Task(One or many)||
  Request Type: POST
  Request: DTO having emailID, forDate and List of tasks (TaskName, assignedPoint, forDate) (TaskId (generated), EvalauedPoint(0), status(open), creationTimeStamp(now()))
  Response: 400 if task more than the limit is tried creating. Will also add relevant messages with the max limit for user's understanding.
            201 with list of the task object that got created.
  Validations on Request: **Check the dto constraints in DTO class
  Business Scenarios it Covers: a. User creating one or more task in one create button hit  
                                b. Multiple task can be created but only for a specific date. Not like one task for one date and other is for other date.
  
  
  
||API 2: Get Tasks (For a range of date)||
  Request Type: GET
  RequestParam: UserEmailId, fromDate, toDate and status (if status is null then is means to fetch all status) 
  Response: 200 with List of Task objects
            400 if there is not task for user for that day
  Business Scenario: Where list of task need to be fetched
  
||API 3: Update Open Task (One or many)||  
  Request Type: PUT
  RequestBody: All attribute related to the task
  RequestBody: DTO with EmailId, TaskName, ForDate, AssignedPoint (update everything except emailId)
  ResponseBody: Updated taskDTO with 200
  Validations on Request: 1. TaskName cannot be Null, 2. ForDate cannot be same as of past, 3. Assigned points must be greater than 0 
  4. Need to make sure the status is open, 5.  emailId is right format, 6. Not validating email id as expecting the user emailId coming must be after authentication
  and hence change of invalid use is very rare. 
  
  
 ||API 4: Update Task Status||
 Request Type: PUT
 Request Param: DTO with emailId, status, evaluatedpoint
 Response Body: TaskId and updatedStatus. Lets decide
 Validations on param: 1. Email Id format, 2. Status must be a valid set of status, 3. Evaluated point must be lesser or equal to assigned points.
 business scenario: case 1: Cancelling Task then change status to cancelled, update the updateTimeStamp, 
                    case 2: Completing the Task: then change status to completed, update the updateTimeStamp, update the evaluatedPoints
                    case 3: reopened a Task: then change status to open, update the updateTimeStamp, make evaluated point to 0. Prerequisite is that it is either completed or closed. Change the status to reopened and update the evaluatedPoint to 0.
                    case 4: change evaluated point: reopen the task and then complete the task by giving new evaluated point. Which mean calling this API two times.
                    
 
 Note: If we have to update a closed/completed task then we must need to open it first and then only we can edit it. Then, may be close or cancel it again.
  
  4. UpdateATask:
  
  5. CancelATask:
  
  7. CompleteDiaryTask: This is for completing multiple tasks
  
  8. DoDiary: This is basically adding diary notes and completing the diary for that day
  
  10. GetEfficiencyForSpecificDuration: 
  
Important Points:
  a. Whenever status is open, evaluated point must always be maintained 0. Hence, updating with open status not allowed
  b. Whenever a task is cancelled, evaluated point must be kept 0. Hence, updating with cancelled status not allowed
  c. Whenever a task is completed, evaluated point can be 0 or more but always be lesser or equal than assigned point.
  d. Status can be open, cancelled, completed, reopened
  e. You cannot update anything when task is cancelled
  f. Task attribute: TaskId, TaskName, forDate, UserEmailId, assignedPoint, EvalauedPoint, status, creationTimeStamp, updateTimeStamp (can do a research when updateTimeStamp be needed?)
  
  
Technical Advancements:
1. Logging efficienct (Check levels properly. Info, Debug and other)
2. Exception Handling
(https://www.baeldung.com/rest-api-error-handling-best-practices)
10. All the TODO
3. Security (JWT)
4. Open API for API Documentation
5. Check Best practices for APIS in all domains
6. Docker, Kubernetes, Deploying your application on Cloud (For free)
7. We should know data validation techniques and everything related to it
8. Testing mechanism ki complete knowledge. Junit and integration both
9. Check tools for code intendation
10. Swagger, SwaggerHub


Individual Doubt:
1. CrudRepository kha use karni hai aur JPARepository kaha
