1. While we added the project I was getting error "**Error :** Process 'command 'C:\Program Files\Java\jdk\bin\java.exe'' finished with non-zero exit value 1"
This comes mostly when the port we are trying to use is already occupied.
Stackoverflow link: https://stackoverflow.com/questions/60651244/process-command-c-program-files-java-jdk-bin-java-exe-finished-with-non-zer

2. We got "org.springframework.beans.factory.BeanCreationException" due to "Error creating bean with name 'dataSource' defined in class path resource"
This means datasource bean is not created. In my case, it happened because we did not mention the sql driver dependency in gradle.
So,when using spring data jpa, you must have the driver detail.

3. In springboot project, we can simply use lombok dependency for logging with @Slf4j annotation. In spring boot project, we need to do a few things to get it working.
First, we need to add lombok dependency. Second we need to exclude spring boot starter logging for all starter dependency as all starter project depend on starter
logging. So, removing from one only wont help. Third, we need to add dependency of spring boot starter log4j.
I took too long to resolve this issue. But the issue was coming because of the Lombok dependency is added. Below is the wrong way i did and right way it suppose to be:
Incorrect: implementation 'org.projectlombok:lombok'
Correct: implementation 'org.projectlombok:lombok'
         annotationProcessor 'org.projectlombok:lombok'
Another mistake i was doing was the way i was excluding the spring boot starter logging. Below is the incorrect and correct way
incorrect: 
configurations {
	compile.exclude module: 'spring-boot-starter-logging'
}
Correct:
configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}
Lastly, this happened due to the lack of my knowledge of gradle and lombok i guess.


4. Intellij has settings option in windows while i guess the same is called as preference in mac hence do not get confused 

5. Check the lombok issue with NoargsArgument and builder. Also, does order of it matters.

6. In Spring Data JPA, a default constructor is needed, ID should have a default value.

7. Do not give id as double or string for entity class. Give it integer or long. Use annotation @GeneratedValue(strategy = GenerationType.IDENTITY). Also, provide
noargsconstructor

8. Status code should be used wisely. For user created, the status should be 201 which is created. Also, send ResponseEntity in return and not string. 
204 when no content return which mean we worked on the request with no errror but there is no content to return. 

9. For null checking string, the best way is third party apache StringUtils that check null and length both. However, for this we need to explicitly put apache common
as dependency. Hence, I though why to put it just for one use case. Hence, I found two relevant methods. String.isEmpty (java 1.6) and String.isBlank(Java 1.11). 
String.isEmpty only checks for length. String.isBlank check for lenth and whitespace both. Hence, i did two checks. One is for null and other for String.isBlank.

10. While desinging urls, it is recommended to have hyphens over camcelCasing or underscore.

11. For an object which we are trying to return a response must have getter otherwise we will receive empty response.

12. Using stream on one type of list and want of get list of other type then we need to use map(). If want to get list of same type then we can use forEach().

13. When we want to have date or Datetime as requestparam then we need to mention the @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date

14. @Value(${""}) is the right syntax. Not @Value("")

15. All the dto or entity classes we use must have NoArgs constructor is they will be involved in data transfer and in term serializarion. 

16. We can make the RequestParam optional too like @RequestParam(required=false) this way if we do not send request param then we do not receive error.

17. In Spring Data JPA, we can use the named parameter. So, these name parameter are the normal parameter of repository method. Check exmaple below:
@Query(value = "select * from task t where t.userEmailId = :userEmailId and t.forDate >= :fromDate " +
            "and t.forDate <= :toDate;", nativeQuery = true)
	 
18. We need to check different ways in which we can calculate sum through a stream. Check the below stack overflow link
@Query(value = "select * from task t where t.userEmailId = :userEmailId and t.forDate >= :fromDate " +
            "and t.forDate <= :toDate;", nativeQuery = true) 

19. Spring Boot use H2 database which has some reserved keyword. If those reserved words are used as table or column name then we get error JdbcSQLSyntaxErrorException.
Hence, we should fix it by @Column("'OFFSET'") if OFFSET is the reserved word.

20. For depecting list of object in json we use [].

21. SaveAll() method is used to save list of objects in one go.

22. Check how to write enums. Practice that once.
