1. While we added the project I was getting error "**Error :** Process 'command 'C:\Program Files\Java\jdk\bin\java.exe'' finished with non-zero exit value 1"
This comes mostly when the port we are trying to use is already occupied.
Stackoverflow link: https://stackoverflow.com/questions/60651244/process-command-c-program-files-java-jdk-bin-java-exe-finished-with-non-zer

2. We got "org.springframework.beans.factory.BeanCreationException" due to "Error creating bean with name 'dataSource' defined in class path resource"
This means datasource bean is not created. In my case, it happened because we did not mention the sql driver dependency in gradle.
So,when using spring data jpa, you must have the driver detail.

3. In springboot project, we can simply use lombok dependency for logging with @Slf4j annotation. In spring boot project, we need to do a few things to get it working.
First, we need to add lombok dependency. Second we need to exclude spring boot starter logging for all starter dependency as all starter project depend on starter
logging. So, removing from one only wont help. Third, we need to add dependency of spring boot starter log4j.
I took too long to resolve this issue. But the issue was coming because of the Lombok dependency is added. Below is the wrong way i did and right way it suppose to be:
Incorrect: implementation 'org.projectlombok:lombok'
Correct: implementation 'org.projectlombok:lombok'
         annotationProcessor 'org.projectlombok:lombok'
Another mistake i was doing was the way i was excluding the spring boot starter logging. Below is the incorrect and correct way
incorrect: 
configurations {
	compile.exclude module: 'spring-boot-starter-logging'
}
Correct:
configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}
Lastly, this happened due to the lack of my knowledge of gradle and lombok i guess.


4. Intellij has settings option in windows while i guess the same is called as preference in mac hence do not get confused 

5. Check the lombok issue with NoargsArgument and builder. Also, does order of it matters.

6. In Spring Data JPA, a default constructor is needed, ID should have a default value.

7. Do not give id as double or string for entity class. Give it integer or long. Use annotation @GeneratedValue(strategy = GenerationType.IDENTITY). Also, provide
noargsconstructor

8. Status code should be used wisely. For user created, the status should be 201 which is created. Also, send ResponseEntity in return and not string. 
204 when no content return which mean we worked on the request with no errror but there is no content to return. 

9. For null checking string, the best way is third party apache StringUtils that check null and length both. However, for this we need to explicitly put apache common
as dependency. Hence, I though why to put it just for one use case. Hence, I found two relevant methods. String.isEmpty (java 1.6) and String.isBlank(Java 1.11). 
String.isEmpty only checks for length. String.isBlank check for lenth and whitespace both. Hence, i did two checks. One is for null and other for String.isBlank.

10. While desinging urls, it is recommended to have hyphens over camcelCasing or underscore.

11. For an object which we are trying to return a response must have getter otherwise we will receive empty response.

12. Using stream on one type of list and want of get list of other type then we need to use map(). If want to get list of same type then we can use forEach().

13. When we want to have date or Datetime as requestparam then we need to mention the @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date

14. @Value(${""}) is the right syntax. Not @Value("")

15. All the dto or entity classes we use must have NoArgs constructor is they will be involved in data transfer and in term serializarion. 

16. We can make the RequestParam optional too like @RequestParam(required=false) this way if we do not send request param then we do not receive error.

17. In Spring Data JPA, we can use the named parameter. So, these name parameter are the normal parameter of repository method. Check exmaple below:
@Query(value = "select * from task t where t.userEmailId = :userEmailId and t.forDate >= :fromDate " +
            "and t.forDate <= :toDate;", nativeQuery = true)
	 
18. We need to check different ways in which we can calculate sum through a stream. Check the below stack overflow link
@Query(value = "select * from task t where t.userEmailId = :userEmailId and t.forDate >= :fromDate " +
            "and t.forDate <= :toDate;", nativeQuery = true) 

19. Spring Boot use H2 database which has some reserved keyword. If those reserved words are used as table or column name then we get error JdbcSQLSyntaxErrorException.
Hence, we should fix it by @Column("'OFFSET'") if OFFSET is the reserved word.

20. For depecting list of object in json we use [].

21. SaveAll() method is used to save list of objects in one go.

22. Check how to write enums. Practice that once.

23. The spring.datasource.url can be made configured by passing properties separated by semicolon. 

24. H2 database has two modes. First is mem based and second is file based. Mem based is volatile thus the data does not last the app restart. Second is file based
which is non volatile. We can use some properties like CLOSE_ON_EXIT=false.

25. For Stream API, for getting a single string value by concatening the list of string. We can use reduce method of stream with two arguments.

26. To move your project from intellij local to github. Click VCS -> some first option and like that.

27. Github has repositories where we can manage one application. Github project is an entity which hold different views which are like azure devops board for 
managing stories and bugs. So, obviously these stories and bugs are for some application hence you can link repository to project. But you cannot to proper
grouping like microservice arch. Github organization is also has free version under which i guess we can create repositoeis but not used so not sure. 

28. Earlier i was using @ResponseStatus annotation with @ExceptionHandler returning ResponseEntity. Actually, It is allowed to be used but it does not give any additional feature with @ExceptionHandler when you are sending ResponseEntity. Because in responseEntity you have to pass the status code anyway. The right use of @ResponseEntity is actually with Custom exception class where its annotated on the class. It can also have attribute reason for passing the error message. One more catch here, if you are using @ResponseStatus(NOT_FOUND) on custom exception and you have exception handler for RuntimeException returning INTERNAL_SERVER_ERROR then ISR will be returned because custom exception with be thrown an since it is runtime exception so it get catched and handler status code gets precendence. 

29. In intellij, enum name for a package is invalid. I can make enums.

30. Do not repeat yourself even in DTO attribute name. For a class Task, should we keep the names like taskName, taskId, taskCreatedDate, taskUpdateDate?. Actually, we should keep names like id, name, createdDate, updateDate. If any other object are kept along side task in task class like user name or id. Then, say userId and userName. 

31. Liquiebase benefit? We get the history of the change along side important benefit to downgrade or upgrade to a version. Well, we can do similar with versioned
sql files but I guess liquibase created a sortof framework or rules of how to do it so you do not have to think of this much simply follow it rules. Moreover, I have not used libquibase or versioned sql file hence cannot comment right now.

32. gradle way of removing a transitive dependency
dependencies{
	implementation ('groupId:artificateId:version'){
		exclude group: 'groundName', module: 'artifactId'
	}
}

33. How to check which port is occupied by which processId? 'netstat -a -o -f'
To check which process is running for a process id: tasklist /fi "pid eq 2640". It gives Image name as well which is nothing but process name. In spring app, it shows java.exe.
To kill the task: taskkill /F /PID 2640 

34. Liquibase lock issue. The application lock is not release earlier and now app is down. We need to update that databaseChangeLoglock table for this. But since is down, hence how can we update the lock? Below is one solution:
Step 1: go to location where data is present. In H2, its data folder.
Step 2: run command "java -cp path/to/h2JarUsedInThatProject/h2-*.jar org.h2.tools.Shell -url jdbc:h2:file:/data/taskdb -user sa -password password"
Example: java -cp C:\Users\rishav.mishra\.gradle\caches\modules-2\files-2.1\com.h2database\h2\2.1.214\d5c2005c9e3279201e12d4776c948578b16bf8b2\h2-2.1.214.jar org.h2.tools.Shell -url "jdbc:h2:file:/data/taskdb" -user sa -password password
Step 3: sql terminal will get open. Run below three command/quries
	select * from datbasechangeloglock
	update DATABASECHANGELOGLOCK set locked = FALSE, LOCKGRANTED=null, LOCKEDBY=null;
	exit
Application should get up.

35. Gradle stores dependencies inside user>gradle>cache>module-2.

36. In JPA, when the table is formed first time by reading the Entity then auto increment is applied on the id column when are trying to auto generate it. But if tables are created by script then we need to make sure to put Auto_increment otherwise the Liquibase wont @GeneratedValue will not work

37. Whenever we get h2 lock related issue (not liquibase) then generally its because the app is running at that port somehow. We need to kill the process running on that port and problem should resolve.

38. The tables in database gets created when you do only define the Entity class and start your application for the first time. Here, you do not actually need create the tables yourself. In this scenario, @GeneratedValue(IDENTITY) will make the id column to have auto increment feature by default and then only it can work. HOwever, if we choose to create the tables ourselves by sql files or some product like liquibase. In this scenario, the responsibility to make id column auto increment lies on us. If we miss it, then @GeneratedValue(IDENTITY) will not work.

39. In JPA, to generate the id column automatically, we have multiple ways. with @GeneratedValue annotation we can choose the strategy like Auto, Identity, Sequence, table and other. Auto is the default strategy where JPA/hibernate takes care of providing the value to identity column. It simply creates the id which once used then cannot be used in any other table on that app. Like, if Auto strategy gives id 1 to table1 then table2 gets an insertion then id 2 will be given. So, the sequence is across the tables. IDENTITY strategy relies that the database will provide id column its value. Also, the auto increment value for two table do not overlap in this. Generally, this is the most used strategy. Third, sequence strategy is similar to identity with some differences. In sequence, hibernate task for the id value from db and then it inserts however in identity it insert the record without id value and then ask db for last generated value. The way they are implemented, sequence is fast than identity. In sequence, i guess hibernate saves next 50 records in a row and hence it is faster. Table is better that it allowed batch update which identity does not allow. But this is something we can explore more later.

40. In JPA, if we are using enum in entity then by default ordinal value gets stored in the database. This is not good in views the database records. Because we get to see integer values. Therefore, we should use the @Enumerated(EnumType.STRING) for storing the string version of your enum.

41. TODO1: Where to use path param (@PathVariable), query param (@RequestParam) and request body? Path variable are more related to specifying the resource like students/1 while query param are more related to not your main resource. Like, attendance/students/{studentId}?dateAfter=2022-02-02. So, its like specifying the resource by path variable but what all to get about the resource or filtering or modifying the result should be by query param. Another angle to understand, that if path param is not found then we send 404 while if query param is resulting no response we should return 200 with empty response. Request body is to be used when you want to post or put. Also, in get, although in HTTPspecification, there is no bar on using get with request body but doing so may cause issues. It may cause issues related to caching and proxing. So, we can say that request body with get should be highly ignored unless we have a very strong reason. Also, we can use RequestBody and RequestParam together but should reconsider the API design if i have to. If we should not use request body with GET then we have to use path variable and request param only. I should say that we should not use more than 5 param in a url otherwise that will look too long. The max length of the url should not be more than 2000 chars including the encryption. Lastly, there is no rule and it should be like we need to do something that server can support following the HTTP specification.

42. Enum ordinal and Enumerated concept
